package ObjetosdeJuego;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;

import Estados.GameState;
import Graficos.Animacion;
import Graficos.Assets;
import Graficos.Sonido;
import Input.KeyBoard;
import maths.Vector2D;

public class Player extends ObjetosMoviles {
	
	private Vector2D heading;
	private Vector2D aceleracion;
	private boolean acelerando=false;
	private long fireRate;
	
	private boolean spawning, visible, escudoActivo, doblePuntajeActivo, disparoRapidoActivo, dobleDisparoActivo;
	private long reaparicion, parpadeo, tiempoEscudo, tiempoDoblePuntaje, tiempoDisparoRapido, tiempoDisparoDoble, disparoRapido,velocidadDisparo;
	private Sonido sonidoDisparo, looser;
	
	private Animacion efectoEscudo;
	
	
	public Player(Vector2D position, Vector2D velocidad, double maxVel, BufferedImage texture, GameState gameState) {
		super(position, velocidad, maxVel, texture, gameState);
		// TODO Auto-generated constructor stub
		heading = new Vector2D(0,1);
		aceleracion = new Vector2D();
		fireRate = 0;
		
		reaparicion = 0; parpadeo = 0; tiempoEscudo = 0; tiempoDoblePuntaje = 0;
		tiempoDisparoRapido = 0; tiempoDisparoDoble = 0;
		
		sonidoDisparo = new Sonido(Assets.playerShoot);
		looser = new Sonido(Assets.playerLoose);
		
		efectoEscudo = new Animacion(Assets.escudo,80,null);
		
		visible = true;
	}

	@Override
	public void update (float dt) {
		// TODO Auto-generated method stub
		fireRate += dt;
		
		if(escudoActivo) {
			tiempoEscudo += dt;
		}
		
		if(doblePuntajeActivo) {
			tiempoDoblePuntaje += dt;
		}
		
		if(disparoRapidoActivo) {
			disparoRapido = Constantes.FIRERATE / 2;
			tiempoDisparoRapido += dt;
		}else {
			disparoRapido = Constantes.FIRERATE;
		}
		
		if(dobleDisparoActivo) {
			tiempoDisparoDoble += dt;
		}
		
		if(tiempoEscudo > Constantes.DURACION_ESCUDO) {
			tiempoEscudo = 0;
			escudoActivo = false;
		}
		
		if(tiempoDoblePuntaje > Constantes.PUNTUACION_DOBLE_TIEMPO) {
			doblePuntajeActivo = false;
			tiempoDoblePuntaje = 0;
		}
		
		if(tiempoDisparoRapido > Constantes.DISPARORAPIDO_TIEMPO) {
			disparoRapidoActivo = false;
			tiempoDisparoDoble = 0;
		}
		
		if(spawning) {
			
			parpadeo += dt;
			reaparicion += dt;
			
			if(parpadeo > Constantes.TIEMPO_PARPADEO) {
				visible = !visible;
				reaparicion = 0;
			}
			
			if(reaparicion > Constantes.TIEMPO_REAPARICION) {
				spawning = false;
				visible = true;
			}
			
		}
		
		if(KeyBoard.DISPARO && fireRate > velocidadDisparo && !spawning) {
			
			if(dobleDisparoActivo) {
				
				Vector2D leftGun = getcenter();
				Vector2D rightGun = getcenter();
				
				Vector2D temp = new Vector2D(heading);
				temp.normalizar();
				temp = temp.setDireccion(angulo - 1.3f);
				temp = temp.scale(width);
				rightGun = rightGun.add(temp);
				
				temp = temp.setDireccion(angulo - 1.9f);
				leftGun = leftGun.add(temp);
				
				Laser izquierdo = new Laser(leftGun, heading, Constantes.LASER_VEL, angulo, Assets.laserrojo, gamestate);
				Laser derecho = new Laser(rightGun, heading, Constantes.LASER_VEL, angulo, Assets.laserazul, gamestate);
				
				gamestate.getObjetosmoviles().add(0,izquierdo);
				gamestate.getObjetosmoviles().add(derecho);
				
			}else {
				gamestate.getObjetosmoviles().add(0,new Laser(
						))
			}
			
		}
		
	}

	@Override
	public void draw(Graphics g) {
		// TODO Auto-generated method stub
		if(!visible) {
			return;
		}
		
		Graphics2D g2d = (Graphics2D)g;
		
		AffineTransform at1 = AffineTransform.getTranslateInstance(position.getX()+width/2+5, position.getY()+height/2+10);
		AffineTransform at2 = AffineTransform.getTranslateInstance(position.getX()+5, position.getY()+height/2+10);
		
		at1.rotate(angulo,-5,-10);
		at2.rotate(angulo, width/2-5,-10);
				
		if(acelerando) {
			g2d.drawImage(Assets.propulsion, at1, null);
			g2d.drawImage(Assets.propulsion, at2, null);				
		}
		
		at = AffineTransform.getTranslateInstance(position.getX(), position.getY());
		at.rotate(angulo, width/2, height/2);
		
		g2d.drawImage(texture, at, null);
	}
	
	public boolean isSpawning() {return spawning;}
	
}

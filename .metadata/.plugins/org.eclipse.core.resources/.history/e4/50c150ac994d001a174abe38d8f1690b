package ObjetosdeJuego;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;

import Estados.GameState;
import Graficos.Assets;
import Graficos.Sonido;
import Input.KeyBoard;
import maths.Vector2D;

public class Player extends ObjetosMoviles {
	
	private Vector2D heading;
	private Vector2D aceleracion;
	private boolean acelerando=false;
	private Cronometro fireRate;
	
	private boolean spawning, visible;
	private Cronometro reaparicion, parpadeo;
	private Sonido sonidoDisparo, looser;
	
	
	public Player(Vector2D position, Vector2D velocidad, double maxVel, BufferedImage texture, GameState gameState) {
		super(position, velocidad, maxVel, texture, gameState);
		// TODO Auto-generated constructor stub
		heading = new Vector2D(0,1);
		aceleracion = new Vector2D();
		fireRate = new Cronometro();
		reaparicion = new Cronometro();
		parpadeo = new Cronometro();
		sonidoDisparo = new Sonido(Assets.playerShoot);
		looser = new Sonido(Assets.playerLoose);
	}

	@Override
	public void update() {
		// TODO Auto-generated method stub
		if(!reaparicion.isRunning()) {
			spawning = false;
			visible = true;
		}
		
		if(spawning) {
			if(!parpadeo.isRunning()) {
				reaparicion.run(Constantes.TIEMPO_PARPADEO);
				visible = !visible;
			}
		}
		
		if(KeyBoard.DISPARO && !fireRate.isRunning() && !spawning) {
			gamestate.getObjetosmoviles().add(0,new Laser(
				getcenter().add(heading.scale(width)),
				heading,
				Constantes.LASER_VEL,
				angulo,
				Assets.laserrojo,
				gamestate
			));
			fireRate.run(Constantes.FIRERATE);
			sonidoDisparo.play();
		}
		
		if(sonidoDisparo.getFramePosition() > 8500) {
			sonidoDisparo.stop();
		}
		
		if(KeyBoard.RIGHT) {
			angulo += Constantes.DELTAANGLE;
		}
		if(KeyBoard.LEFT) {
			angulo -= Constantes.DELTAANGLE;
		}
		if(KeyBoard.UP) {
			aceleracion = heading.scale(Constantes.ACC);
			acelerando = true;
		}else{
			if(velocidad.getMagnitud()!=0) {
				aceleracion = (velocidad.scale(-1).normalizar()).scale(Constantes.ACC/2);
			}
			acelerando = false;
		}
		
		velocidad = velocidad.add(aceleracion);
		velocidad = velocidad.limit(maxVel);
		heading = heading.setDireccion(angulo-Math.PI/2);
		position = position.add(velocidad);
		
		//Limitando la pantalla para que no desaparezca la nave
		if(position.getX() > Constantes.WIDTH) {
			position.setX(0);
		}
		if(position.getY() > Constantes.HEIGHT) {
			position.setY(0);
		}
		
		if(position.getX() < 0) {
			position.setX(Constantes.WIDTH);
		}
		if(position.getY() < 0) {
			position.setY(Constantes.HEIGHT);
		}
		
		fireRate.update();
		reaparicion.update();
		parpadeo.update();
		colisiones();
		
	}
	
	public void Destruir() {
		spawning = true;
		reaparicion.run(Constantes.TIEMPO_REAPARICION);
		looser.play();
		reiniciarvalores();
		gamestate.restarvida();
	}
	
	private void reiniciarvalores() {
		angulo = 0;
		velocidad = new Vector2D();
		position = new Vector2D(Constantes.WIDTH/2 - Assets.player.getWidth()/2,
				Constantes.HEIGHT/2 - Assets.player.getHeight()/2);
	}

	@Override
	public void draw(Graphics g) {
		// TODO Auto-generated method stub
		if(!visible) {
			return;
		}
		
		Graphics2D g2d = (Graphics2D)g;
		
		AffineTransform at1 = AffineTransform.getTranslateInstance(position.getX()+width/2+5, position.getY()+height/2+10);
		AffineTransform at2 = AffineTransform.getTranslateInstance(position.getX()+5, position.getY()+height/2+10);
		
		at1.rotate(angulo,-5,-10);
		at2.rotate(angulo, width/2-5,-10);
				
		if(acelerando) {
			g2d.drawImage(Assets.propulsion, at1, null);
			g2d.drawImage(Assets.propulsion, at2, null);				
		}
		
		at = AffineTransform.getTranslateInstance(position.getX(), position.getY());
		at.rotate(angulo, width/2, height/2);
		
		g2d.drawImage(texture, at, null);
	}
	
	public boolean isSpawning() {return spawning;}
	
}
